import type { PdfOptions } from "~/types/pdf_types";
import type { CustomForm } from "~/types/custom_form";
import { jsPDF } from 'jspdf';

let jsPDFModule: any

// Dynamically import on client-side only
if (process.client) {
  jsPDFModule = import('jspdf')
}

export class PdfService {
  private doc: jsPDF | null = null
  private readonly defaultOptions: PdfOptions = {
    filename: 'form-submission',
    dateFormat: { year: 'numeric', month: 'long', day: 'numeric' }
  }

  constructor() {}

  private async initializePdf(): Promise<void> {
    if (!this.doc) {
      const { jsPDF } = await import('jspdf'); // Dynamic import
      this.doc = new jsPDF();
    }
  }

  public async generatePdf(data: CustomForm): Promise<boolean> {
    if (!process.client) return false;
    
    try {
      await this.initializePdf();
      if (!this.doc) return false;
      
      this.generateContent(data);
      return true;
    } catch (error) {
      console.error('Error generating PDF:', error);
      return false;
    }
  }

  public getDataUrl(): string | null {
    return this.doc?.output('dataurlstring') ?? null
  }

  public download(options?: PdfOptions): void {
    const opts = { ...this.defaultOptions, ...options }
    this.doc?.save(`${opts.filename}-${Date.now()}.pdf`)
  }

  private generateContent(data: CustomForm): void {
    // Set up document properties
  this.doc?.setProperties({
    title: 'Travel Expense Form',
    author: 'HRCG GmbH',
    creator: 'HRCG Form Creator'
  });

  // Header section
  this.doc?.setFontSize(24);
  this.doc?.setTextColor(44, 62, 80); // Dark blue-gray
  this.doc?.text('Travel Expense Form', 20, 20);

  // Dynamic form fields positioning
  let yPosition = 70;
  const lineHeight = 10;

  // Helper function for adding form fields
  const addField = (label: string, value: string | number) => {
    this.doc?.text(label, 30, yPosition);
    this.doc?.text(String(value), 90, yPosition);
    yPosition += lineHeight;
  };

  // Date and reference number
  this.doc?.setFontSize(10);
  this.doc?.setTextColor(127, 140, 141); // Gray
  const currentDate = new Date().toLocaleDateString();
  this.doc?.text(`Date: ${currentDate}`, 20, 35);
  const refNumber = `REF-${Date.now().toString().slice(-6)}`;
  this.doc?.text(`Reference: ${refNumber}`, 20, 42);

  // Separator line
  this.doc?.setDrawColor(189, 195, 199); // Light gray
  this.doc?.setLineWidth(0.5);
  this.doc?.line(20, 45, 190, 45);

  // Form data section
  this.doc?.setFontSize(12);
  this.doc?.setTextColor(52, 73, 94); // Dark gray-blue

  // Contact Information section
  this.doc?.setFont("helvetica", "bold");
  this.doc?.text('Contact Information', 20, 60);
  this.doc?.setFont("helvetica", "normal");
  
  // Add all form fields
  addField('Name:', data.personal_information.firstname + ', ' + data.personal_information.lastname);
  addField('Phone Number:', data.personal_information.phone.code + ' ' + data.personal_information.phone.number);
  addField('Email:', '' + data.personal_information.email);
  
  // Example additional fields:
  // addField('Department:', data.department);
  // addField('Request Date:', data.requestDate);

  // Add a new section if needed
  yPosition += lineHeight;
  this.doc?.setFont("helvetica", "bold");
  this.doc?.text('Additional Information', 20, yPosition);
  this.doc?.setFont("helvetica", "normal");
  yPosition += lineHeight;

  // Check if need a new page
  if (yPosition > (this.doc?.internal.pageSize.height || 297) - 40) {
    this.doc?.addPage();
    yPosition = 20;
  }

  // Footer
  const pageHeight = this.doc?.internal.pageSize.height || 297;
  this.doc?.setFontSize(8);
  this.doc?.setTextColor(127, 140, 141);
  this.doc?.text('Generated by HRCG Form Creator', 20, pageHeight - 20);
  this.doc?.text(`Page 1 of 1`, 180, pageHeight - 20);
  }
}