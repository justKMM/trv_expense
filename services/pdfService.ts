import type { PdfOptions } from "~/types/pdf_types";
import type { TravelExpenseForm } from "~/types/travel_expense_form";
import { jsPDF } from 'jspdf';

let jsPDFModule: any;
// Dynamically import on client-side only
if (process.client) {
  jsPDFModule = import('jspdf');
}

export class TravelExpensePdfService {
  private doc: jsPDF | null = null;
  private readonly defaultOptions: PdfOptions = {
    filename: 'travel-expense-form',
    dateFormat: { year: 'numeric', month: 'long', day: 'numeric' }
  };

  // Constants for page layout
  private readonly PAGE_MARGIN_TOP = 26;
  private readonly PAGE_MARGIN_BOTTOM = 12;
  private readonly PAGE_MARGIN_SIDES = 20;
  private readonly HEADER_HEIGHT = 20;
  private readonly FOOTER_HEIGHT = 25;

  // Components' heights
  private readonly TABLE_HEADER_HEIGHT = 10;
  private readonly LABEL_INDENT = 10;
  private readonly VALUE_INDENT = 70;
  private readonly SECTION_REQUIRED_SPACE = 40;

  // Spacing constants
  private readonly SECTION_SPACING = 20;
  private readonly LINE_SPACING = 10;
  private readonly TITLE_CONTENT_SPACING = 15;
  private readonly TABLE_ROW_SPACING = 10;
  private readonly TABLE_HEADER_SPACING = 12;
  private readonly FOOTER_SPACING = 8;

  constructor() {}

  private async initializePdf(): Promise<void> {
    if (!this.doc) {
      const { jsPDF } = await import('jspdf');
      this.doc = new jsPDF();
    }
  }

  private checkPageBreak(currentY: number, requiredSpace: number = 20): number {
    if (!this.doc) return currentY;

    const pageHeight = this.doc.internal.pageSize.height;
    const effectivePageBottom = pageHeight - this.PAGE_MARGIN_BOTTOM - this.FOOTER_HEIGHT;

    if (currentY + requiredSpace > effectivePageBottom) {
      this.doc.addPage();
      return this.PAGE_MARGIN_TOP + this.HEADER_HEIGHT;
    }
    return currentY;
  }

  private addPageHeader(): void {
    if (!this.doc) return;

    // Header line
    this.doc.setDrawColor(189, 195, 199);
    this.doc.setLineWidth(0.5);
    this.doc.line(
      this.PAGE_MARGIN_SIDES, 
      this.PAGE_MARGIN_TOP + this.HEADER_HEIGHT, 
      this.doc.internal.pageSize.width - this.PAGE_MARGIN_SIDES, 
      this.PAGE_MARGIN_TOP + this.HEADER_HEIGHT
    );
  }

  private addPageFooter(pageNumber: number): void {
    if (!this.doc) return;

    const pageHeight = this.doc.internal.pageSize.height;
    const footerY = pageHeight - this.FOOTER_HEIGHT;

    // Footer content
    this.doc.setFontSize(8);
    this.doc.setTextColor(127, 140, 141);
    this.doc.text('Generated by HRCG Form Creator', this.PAGE_MARGIN_SIDES, footerY);
    this.doc.text(`Page ${pageNumber}`, this.doc.internal.pageSize.width - this.PAGE_MARGIN_SIDES - this.FOOTER_SPACING, footerY);
  }

  public async generatePdf(data: TravelExpenseForm): Promise<boolean> {
    if (!process.client) return false;

    try {
      await this.initializePdf();
      if (!this.doc) return false;

      this.generateContent(data);
      return true;
    } catch (error) {
      console.error('Error generating PDF:', error);
      return false;
    }
  }

  public getDataUrl(): string | null {
    return this.doc?.output('dataurlstring') ?? null;
  }

  public download(options?: PdfOptions): void {
    const opts = { ...this.defaultOptions, ...options };
    this.doc?.save(`${opts.filename}-${Date.now()}.pdf`);
  }

  private formatDate(date: Date | null): string {
    if (!date) return 'N/A';
    return new Date(date).toLocaleDateString('en-US', this.defaultOptions.dateFormat);
  }

  private formatCurrency(amount: number | null): string {
    if (amount === null) return 'N/A';
    return new Intl.NumberFormat('de-DE', { style: 'currency', currency: 'EUR' }).format(amount);
  }

  private addTableHeader(headers: string[], startY: number): number {
    if (!this.doc) return startY;

    const pageWidth = this.doc.internal.pageSize.width;
    const columnWidth = (pageWidth - 2 * this.PAGE_MARGIN_SIDES) / headers.length;

    this.doc.setFillColor(244, 244, 244);
    this.doc.rect(
      this.PAGE_MARGIN_SIDES, 
      startY - 5, 
      pageWidth - 2 * this.PAGE_MARGIN_SIDES, 
      this.TABLE_HEADER_HEIGHT, 
      'F'
    );
    
    this.doc.setFont("helvetica", "bold");
    headers.forEach((header, index) => {
      this.doc?.text(
        header, 
        this.PAGE_MARGIN_SIDES + (columnWidth * index), 
        startY
      );
    });
    this.doc.setFont("helvetica", "normal");

    return startY + this.TABLE_ROW_SPACING;
  }

  private generateContent(data: TravelExpenseForm): void {
    if (!this.doc) return;

    // Document properties
    this.doc.setProperties({
      title: 'Travel Expense Form',
      author: 'HRCG GmbH',
      creator: 'HRCG Form Creator'
    });

    let yPosition = this.PAGE_MARGIN_TOP;

    // Header
    this.doc.setFontSize(24);
    this.doc.setTextColor(44, 62, 80);
    this.doc.text('Travel Expense Form', this.PAGE_MARGIN_SIDES, yPosition);

    // Date
    yPosition += 15;
    this.doc.setFontSize(10);
    this.doc.setTextColor(127, 140, 141);
    this.doc.text(`Date: ${new Date().toLocaleDateString()}`, this.PAGE_MARGIN_SIDES, yPosition);

    this.addPageHeader();

    // Personal Information
    yPosition = this.PAGE_MARGIN_TOP + this.HEADER_HEIGHT + this.SECTION_SPACING;
    this.doc.setFontSize(14);
    this.doc.setTextColor(52, 73, 94);
    this.doc.setFont("helvetica", "bold");
    this.doc.text('Personal Information', this.PAGE_MARGIN_SIDES, yPosition);
    this.doc.setFont("helvetica", "normal");
    this.doc.setFontSize(12);

    yPosition += this.TITLE_CONTENT_SPACING;
    const personalInfo = [
      { label: 'Name', value: `${data.personal_information.firstname} ${data.personal_information.lastname}` },
      { label: 'Email', value: data.personal_information.email },
      { label: 'Phone', value: `${data.personal_information.phone.code} ${data.personal_information.phone.number}` },
      { label: 'Address', value: data.personal_information.address },
      { label: 'IBAN', value: data.personal_information.iban }
    ];

    personalInfo.forEach(item => {
      yPosition = this.checkPageBreak(yPosition, this.LINE_SPACING);
      this.doc?.text(`${item.label}:`, this.PAGE_MARGIN_SIDES + this.LABEL_INDENT, yPosition);
      this.doc?.text(item.value || 'N/A', this.PAGE_MARGIN_SIDES + this.VALUE_INDENT, yPosition);
      yPosition += this.TABLE_ROW_SPACING;
    });

    // Transport Costs Table
    yPosition = this.checkPageBreak(yPosition + this.SECTION_SPACING, this.SECTION_REQUIRED_SPACE);
    this.doc.setFont("helvetica", "bold");
    this.doc.setFontSize(14);
    this.doc.text('Transport Costs', this.PAGE_MARGIN_SIDES, yPosition);
    this.doc.setFontSize(12);
    
    yPosition += this.TABLE_HEADER_SPACING;
    const transportHeaders = ['Type', 'Date', 'Cost'];
    yPosition = this.addTableHeader(transportHeaders, yPosition);

    let transportTotal = 0;
    data.form_values.transportCosts.forEach(transport => {
      yPosition = this.checkPageBreak(yPosition, 15);

      this.doc?.text(transport.type || 'N/A', this.PAGE_MARGIN_SIDES, yPosition);
      this.doc?.text(this.formatDate(transport.date), this.PAGE_MARGIN_SIDES + 65, yPosition);
      this.doc?.text(this.formatCurrency(transport.cost), this.PAGE_MARGIN_SIDES + 130, yPosition);
      
      if (transport.cost) transportTotal += transport.cost;
      yPosition += this.TABLE_ROW_SPACING;
    });

    yPosition = this.checkPageBreak(yPosition, this.SECTION_SPACING);
    this.doc?.text('Total Transport Costs:', this.PAGE_MARGIN_SIDES + 65, yPosition);
    this.doc?.text(this.formatCurrency(transportTotal), this.PAGE_MARGIN_SIDES + 130, yPosition);

    // Accommodation Costs Table
    yPosition = this.checkPageBreak(yPosition + this.SECTION_SPACING, 40);
    this.doc.setFont("helvetica", "bold");
    this.doc.setFontSize(14);
    this.doc.text('Accommodation Costs', this.PAGE_MARGIN_SIDES, yPosition);
    this.doc.setFontSize(12);

    yPosition += this.TABLE_HEADER_SPACING;
    const accommodationHeaders = ['Check-in', 'Check-out', 'Cost'];
    yPosition = this.addTableHeader(accommodationHeaders, yPosition);

    let accommodationTotal = 0;
    data.form_values.accommodationCosts.forEach(accommodation => {
      if (accommodation.checkIn && accommodation.checkOut && accommodation.cost)  {
        yPosition = this.checkPageBreak(yPosition, this.SECTION_SPACING);

      this.doc?.text(this.formatDate(accommodation.checkIn), this.PAGE_MARGIN_SIDES, yPosition);
      this.doc?.text(this.formatDate(accommodation.checkOut), this.PAGE_MARGIN_SIDES + 65, yPosition);
      this.doc?.text(this.formatCurrency(accommodation.cost), this.PAGE_MARGIN_SIDES + 130, yPosition);
      
      if (accommodation.cost) accommodationTotal += accommodation.cost;
      yPosition += this.TABLE_ROW_SPACING;
    }
    });

    yPosition = this.checkPageBreak(yPosition, 15);
    this.doc?.text('Total Accommodation Costs:', this.PAGE_MARGIN_SIDES + 65, yPosition);
    this.doc?.text(this.formatCurrency(accommodationTotal), this.PAGE_MARGIN_SIDES + 130, yPosition);

    // Extra Costs Table
    yPosition = this.checkPageBreak(yPosition + this.SECTION_SPACING, 40);
    this.doc.setFont("helvetica", "bold");
    this.doc.setFontSize(14);
    this.doc.text('Extra Costs', this.PAGE_MARGIN_SIDES, yPosition);
    this.doc.setFontSize(12);

    yPosition += this.TABLE_HEADER_SPACING;
    const extraHeaders = ['Description', 'Amount'];
    yPosition = this.addTableHeader(extraHeaders, yPosition);

    let extraTotal = 0;
    data.form_values.extraCosts.forEach(extra => {
      yPosition = this.checkPageBreak(yPosition, 15);

      this.doc?.text(extra.description, this.PAGE_MARGIN_SIDES, yPosition);
      this.doc?.text(this.formatCurrency(extra.amount), this.PAGE_MARGIN_SIDES + 130, yPosition);
      
      extraTotal += extra.amount;
      yPosition += this.TABLE_ROW_SPACING;
    });

    yPosition = this.checkPageBreak(yPosition, 15);
    this.doc?.text('Total Extra Costs:', this.PAGE_MARGIN_SIDES + 65, yPosition);
    this.doc?.text(this.formatCurrency(extraTotal), this.PAGE_MARGIN_SIDES + 130, yPosition);

    // Total Costs Summary
    yPosition = this.checkPageBreak(yPosition + this.SECTION_SPACING, 25);
    this.doc.setFillColor(244, 244, 244);
    this.doc.rect(
      this.PAGE_MARGIN_SIDES, 
      yPosition - 5, 
      this.doc.internal.pageSize.width - 2 * this.PAGE_MARGIN_SIDES, 
      this.TABLE_HEADER_HEIGHT + 8, 
      'F'
    );
    
    this.doc.setFont("helvetica", "bold");
    this.doc.setFontSize(14);
    this.doc.text('Total Travel Expenses:', this.PAGE_MARGIN_SIDES, yPosition + 5);
    this.doc.text(
      this.formatCurrency(transportTotal + accommodationTotal + extraTotal), 
      this.PAGE_MARGIN_SIDES + 130, 
      yPosition + 5
    );

    // Add footer to all pages
    const totalPages = this.doc.internal.pages.length - 1;
    for (let i = 1; i <= totalPages; i++) {
      this.doc.setPage(i);
      this.addPageFooter(i);
    }
  }

  public destroy(): void {
    if (this.doc) {
      // Clear any internal events
      const events = this.doc.internal.events as unknown as Record<string, unknown>;
      if (events) {
        // Type-safe way to clear events
        Object.keys(events).forEach(eventName => {
          if (events.hasOwnProperty(eventName)) {
            events[eventName] = {};
          }
        });
      }
      // Clear the reference
      this.doc = null;
    }
  }
}